//
//  PremiereVersionUtilities.m
//  PlutoHelperAgent
//
//  Created by Andy Gallagher on 23/04/2022.
//  Copyright Â© 2022 Guardian News & Media. All rights reserved.
//

#import "PremiereVersionUtilities.h"

// getVersionData uses the built in macOS application system_profiler to output XML about all applications installed on the computer.
// This XML data is then processed, searching for data about just those applications who's name contains the string 'Adobe Premiere Pro'.
// The version numbers and paths found are then stored in a NSUserPreferences key for later use.
// Please note that this function may take a few seconds or as much as several minutes to run if the computer is connected to a slow storage device.
@implementation PremiereVersionUtilities
/**
 Forks a system_profiler instance and gets the applications information in XML format. Returns the contents as a raw NSData buffer, that should
 be plist-formatted XML
 */
+ (NSData *) getApplicationsXml {
    NSTask *task = [[NSTask alloc] init];
    [task setLaunchPath:@"/usr/sbin/system_profiler"];
    [task setArguments:@[ @"SPApplicationsDataType", @"-xml" ]];
    [task setCurrentDirectoryPath:@"/"];
    NSPipe *outputData = [NSPipe pipe];
    [task setStandardOutput:outputData];
    [task launch];
    NSFileHandle * read = [outputData fileHandleForReading];
    NSData * dataRead = [read readDataToEndOfFile];
    [task waitUntilExit];
    return dataRead;
}

/**
 Creates a temporary file and writes the data into it.
 see https://stackoverflow.com/questions/215820/how-do-i-create-a-temporary-file-with-cocoa
 */
+ (NSString *)createTemporaryFile:(NSData *)content {
    // Create a unique file in the system temporary directory
    NSString *guid = [[NSProcessInfo processInfo] globallyUniqueString];
    NSString *path = [NSTemporaryDirectory() stringByAppendingPathComponent:guid];
    [content writeToFile:path atomically:true];
    return path;
}

/**
 Helper function that retrieves the appliations data from System Profiler and then puts it into a temporary file
 NOTE: This file should be deleted when no longer needed.
 */
+ (NSString *) getApplicationsXmlToFile {
    NSData *data = [self getApplicationsXml];
    return [self createTemporaryFile:data];
}

/**
 Normalises the given version string to ensure that it has three parts to it. This is done by padding out with ".0" to the required length.
 */
+ (NSString *) normaliseVersionParts:(NSString *)rawVersionString {
    NSUInteger numberOfOccurrencesInVersion = [[rawVersionString componentsSeparatedByString:@"."] count] - 1;
    if (numberOfOccurrencesInVersion == 0) {
        return [NSString stringWithFormat:@"%@.0.0", rawVersionString];
    } else if (numberOfOccurrencesInVersion == 1) {
         return [NSString stringWithFormat:@"%@.0", rawVersionString];
    } else {
        return rawVersionString;
    }
}

/**
 Refreshes the premiere version data that is cached in the user's defaults.
 Takes in a file path that has been generated by `getApplicationsXmlToFile` and locates relevant applications.
 */
+ (NSDictionary *)refreshVersionData:(NSString *)filePath {
    NSArray<NSDictionary*> *output = [NSArray arrayWithContentsOfFile:filePath];
    NSMutableDictionary *premiereVersions = [NSMutableDictionary dictionary];
    
    //yeah for some reason the data is in the format of a single-element array, which contains a dictionary, which then contains the array of apps :shrug:
    NSArray *apps = [[output objectAtIndex:0] valueForKey:@"_items"];
    
    for (NSDictionary* appInfo in apps) {
        NSString *appName = [appInfo valueForKey:@"_name"];
        if([appName rangeOfString:@"Adobe Premiere Pro"].location != NSNotFound) {
            NSString *appVersion = [PremiereVersionUtilities normaliseVersionParts:[appInfo valueForKey:@"version"]];
            NSLog(@"Found %@ version %@", appName, appVersion);
            premiereVersions[appVersion] = [appInfo valueForKey:@"path"];
        }
    }
    
    [[NSUserDefaults standardUserDefaults] setObject:premiereVersions forKey:@"Premiere_versions"];
    return premiereVersions;
}
@end
